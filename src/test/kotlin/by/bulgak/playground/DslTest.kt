/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package by.bulgak.playground

import by.bulgak.playground.bean.Having.LESS
import by.bulgak.playground.bean.Join
import kotlin.test.Test
import kotlin.test.assertEquals

class DslTest {
    @Test
    fun testSuccessCaseWithAllFields() {
        // given
        val expected = "SELECT id, name, surname FROM Students ORDER BY surname LIMIT 100 HAVING mark < 5 ";
        //when
        val result = query {
            columns = listOf("id", "name", "surname")
            from = "Students"
            orderBy = "surname"
            having {
                left = "mark"
                condition = LESS
                right = "5"
            }
            limit = 100
        }
        //then
        assertEquals(expected, result)
    }

    @Test
    fun testSuccessCaseWithJoin() {
        // given
        val expected = "SELECT id, name, surname FROM Students JOIN Teachers ON Students.teacherId = Teachers.teacherId ORDER BY surname LIMIT 100 HAVING mark < 5 ";
        //when
        val result = query {
            columns = listOf("id", "name", "surname")
            from = "Students"
            connections = listOf(
                    join {
                        leftTable = "Students"
                        rightTable = "Teachers"
                        condition {
                            left = "teacherId"
                            right = "teacherId"
                            condition = Join.EQUAL
                        }
                    }
            )
            orderBy = "surname"
            having {
                left = "mark"
                condition = LESS
                right = "5"
            }
            limit = 100
        }
        //then
        assertEquals(expected, result)
    }

    @Test
    fun testSuccessCaseWithoutOrder() {
        // given
        val expected = "SELECT id, name, surname FROM Students LIMIT 100";
        //when
        val result = query {
            columns = listOf("id", "name", "surname")
            from = "Students"
            limit = 100
        }
        //then
        assertEquals(expected, result)
    }

    @Test
    fun testSuccessCaseWithoutLimit() {
        // given
        val expected = "SELECT id, name, surname FROM Students ORDER BY surname";
        //when
        val result = query {
            columns = listOf("id", "name", "surname")
            from = "Students"
            orderBy = "surname"
        }
        //then
        assertEquals(expected, result)
    }

    @Test
    fun testSuccessCaseWithoutLimitAndOrder() {
        // given
        val expected = "SELECT id, name, surname FROM Students";
        //when
        val result = query {
            columns = listOf("id", "name", "surname")
            from = "Students"
        }
        //then
        assertEquals(expected, result)
    }

    @Test(expected = Exception::class)
    fun testWhenSelectElementIsBlank() {
        //when
        query {
            columns = listOf("id", "name", "surname", "   ")
            from = "Students"
            orderBy = "surname"
            limit = 100
        }
    }

    @Test(expected = Exception::class)
    fun testWhenFromElementIsBlank() {
        //when
        query {
            columns = listOf("id", "name", "surname")
            from = ""
            orderBy = "surname"
            limit = 100
        }
    }

    @Test(expected = Exception::class)
    fun testWhenLimitIsLessThenZiro() {
        //when
        query {
            columns = listOf("id", "name", "surname")
            from = "Student"
            orderBy = "surname"
            limit = -1
        }
    }


    @Test(expected = Exception::class)
    fun testWhenOrderingyUnknownField() {
        //when
        query {
            columns = listOf("id", "name", "surname")
            from = "Student"
            orderBy = "mark"
        }
    }

    @Test(expected = Exception::class)
    fun testWhenHavingHasEmptyField() {
        //when
        query {
            columns = listOf("id", "name", "surname")
            from = "Students"
            orderBy = "surname"
            having {
                condition = LESS
                right = "5"
            }
            limit = 100
        }
    }

    @Test(expected = Exception::class)
    fun testWhenHavingHasEmptyValue() {
        query {
            columns = listOf("id", "name", "surname")
            from = "Students"
            orderBy = "surname"
            having {
                left = "mark"
                condition = LESS
            }
            limit = 100
        }
    }

    @Test(expected = Exception::class)
    fun testWhenHavingHasEmptyCondition() {
        query {
            columns = listOf("id", "name", "surname")
            from = "Students"
            orderBy = "surname"
            having {
                left = "mark"
                right = "5"
            }
            limit = 100
        }
    }
}