/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package by.bulgak.playground

class Having {
    var field: String = ""
    var condition: HavingCondition? = null
    var value: String = ""

    enum class HavingCondition(val value: String) {
        LESS("<"),
        MORE(">"),
        EQUAL("="),
        LESS_OR_EQUAL("<="),
        MORE_OR_EQUAL(">="),
        NOT_EQUAL("!=");
    }

    override fun toString(): String {
        return " HAVING $field ${condition!!.value} $value "
    }
}

class Query {
    var columns: List<String> = listOf("*")
    var from: String = ""
    var orderBy: String = ""
    var having: Having? = null
    var limit: Int? = null

    override fun toString(): String {
        var query = columns.joinToString(prefix = "SELECT ") { it }
                .plus(" FROM ").plus(from)
        if (orderBy.isNotBlank()) query += " ORDER BY ".plus(orderBy)
        limit?.takeIf { it > 0 }?.apply { query += " LIMIT ".plus(this) }
        having?.apply { query = query.plus(this.toString()) }
        return query
    }
}

fun Query.validate() {
    if (columns.isEmpty() || columns.any { it.isBlank() }) {
        throw Exception("List of columns for return can not be empty or has blank lines")
    }
    if (from.isBlank()) {
        throw Exception("From element can not be nul or empty")
    }
    if (orderBy.isNotBlank() && columns.none { it.equals(orderBy) }) {
        throw Exception("Specified value for ordering $orderBy is not resented in result columns $columns")
    }
    if (limit != null && limit!! < 0) {
        throw Exception("Limit $limit should be positive integer value")
    }
    having?.validate()
}

fun Having.validate() {
    if(field.isBlank()) {
        throw Exception("Having block must have non empty field")
    }
    if(condition == null) {
        throw Exception("Having block must have valid condition field")
    }
    if(value.isBlank()) {
        throw Exception("Having block must have non empty value")
    }
}

fun Query.having(request: Having.() -> Unit) {
    this.having = Having().apply(request)
}

fun query(request: Query.() -> Unit): String {
    val query = Query().apply(request)
    query.validate()
    return query.toString()
}